
GET           /                                      controllers.gen.CarController.carBackendPage()

# Admin
GET           /admin/admin                           controllers.gen.AdminController.adminBackendPage()
GET           /report/admin                          controllers.gen.AdminController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/admin                             controllers.gen.AdminController.getNew()

PUT           /admin/:id                             controllers.gen.AdminController.update(id: Long)
POST          /admin                                 controllers.gen.AdminController.add()


# AdminJournal
GET           /p/adminjournal                        controllers.gen.AdminJournalController.adminJournalPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/adminjournal                    controllers.gen.AdminJournalController.adminJournalBackendPage()
GET           /report/adminjournal                   controllers.gen.AdminJournalController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/adminjournal                      controllers.gen.AdminJournalController.getNew()



# Car
GET           /p/car                                 controllers.gen.CarController.carPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/car                             controllers.gen.CarController.carBackendPage()
GET           /report/car                            controllers.gen.CarController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/car                               controllers.gen.CarController.getNew()

PUT           /car/:id                               controllers.gen.CarController.update(id: Long)
POST          /car                                   controllers.gen.CarController.add()


# Complain
GET           /p/complain                            controllers.gen.ComplainController.complainPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/complain                        controllers.gen.ComplainController.complainBackendPage()
GET           /report/complain                       controllers.gen.ComplainController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/complain                          controllers.gen.ComplainController.getNew()

PUT           /complain/:id                          controllers.gen.ComplainController.update(id: Long)
POST          /complain                              controllers.gen.ComplainController.add()


# Config
GET           /p/config                              controllers.gen.ConfigController.configPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/config                          controllers.gen.ConfigController.configBackendPage()
GET           /report/config                         controllers.gen.ConfigController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/config                            controllers.gen.ConfigController.getNew()

PUT           /config/:id                            controllers.gen.ConfigController.update(id: Long)
POST          /config                                controllers.gen.ConfigController.add()


# Feedback
GET           /p/feedback                            controllers.gen.FeedbackController.feedbackPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/feedback                        controllers.gen.FeedbackController.feedbackBackendPage()
GET           /report/feedback                       controllers.gen.FeedbackController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/feedback                          controllers.gen.FeedbackController.getNew()

PUT           /feedback/:id                          controllers.gen.FeedbackController.update(id: Long)
POST          /feedback                              controllers.gen.FeedbackController.add()


# Fix
GET           /p/fix                                 controllers.gen.FixController.fixPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/fix                             controllers.gen.FixController.fixBackendPage()
GET           /report/fix                            controllers.gen.FixController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/fix                               controllers.gen.FixController.getNew()

PUT           /fix/:id                               controllers.gen.FixController.update(id: Long)
POST          /fix                                   controllers.gen.FixController.add()


# Info
GET           /p/info                                controllers.gen.InfoController.infoPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/info                            controllers.gen.InfoController.infoBackendPage()
GET           /report/info                           controllers.gen.InfoController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/info                              controllers.gen.InfoController.getNew()

PUT           /info/:id                              controllers.gen.InfoController.update(id: Long)
POST          /info                                  controllers.gen.InfoController.add()


# Pop
GET           /p/pop                                 controllers.gen.PopController.popPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/pop                             controllers.gen.PopController.popBackendPage()
GET           /report/pop                            controllers.gen.PopController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/pop                               controllers.gen.PopController.getNew()

PUT           /pop/:id                               controllers.gen.PopController.update(id: Long)
POST          /pop                                   controllers.gen.PopController.add()

GET           /pop/:id/users                         controllers.gen.PopController.getPopUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /pop/:id                               controllers.gen.PopController.delete(id: Long)


# Product
GET           /p/product                             controllers.gen.ProductController.productPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/product                         controllers.gen.ProductController.productBackendPage()
GET           /report/product                        controllers.gen.ProductController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/product                           controllers.gen.ProductController.getNew()

PUT           /product/:id                           controllers.gen.ProductController.update(id: Long)
POST          /product                               controllers.gen.ProductController.add()

GET           /product/:id/purchases                 controllers.gen.ProductController.getProductPurchases(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /product/:id/sales                     controllers.gen.ProductController.getProductSales(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /product/:id                           controllers.gen.ProductController.delete(id: Long)


# Purchase
GET           /p/purchase                            controllers.gen.PurchaseController.purchasePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/purchase                        controllers.gen.PurchaseController.purchaseBackendPage()
GET           /report/purchase                       controllers.gen.PurchaseController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/purchase                          controllers.gen.PurchaseController.getNew()

PUT           /purchase/:id                          controllers.gen.PurchaseController.update(id: Long)
POST          /purchase                              controllers.gen.PurchaseController.add()

GET           /purchase/:id/products                 controllers.gen.PurchaseController.getPurchaseProducts(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /purchase/:id                          controllers.gen.PurchaseController.delete(id: Long)


# Red
GET           /p/red                                 controllers.gen.RedController.redPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/red                             controllers.gen.RedController.redBackendPage()
GET           /report/red                            controllers.gen.RedController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/red                               controllers.gen.RedController.getNew()

PUT           /red/:id                               controllers.gen.RedController.update(id: Long)
POST          /red                                   controllers.gen.RedController.add()

GET           /red/:id/users                         controllers.gen.RedController.getRedUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /red/:id                               controllers.gen.RedController.delete(id: Long)


# Remind
GET           /p/remind                              controllers.gen.RemindController.remindPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/remind                          controllers.gen.RemindController.remindBackendPage()
GET           /report/remind                         controllers.gen.RemindController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/remind                            controllers.gen.RemindController.getNew()

PUT           /remind/:id                            controllers.gen.RemindController.update(id: Long)
POST          /remind                                controllers.gen.RemindController.add()

GET           /remind/:id/users                      controllers.gen.RemindController.getRemindUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /remind/:id                            controllers.gen.RemindController.delete(id: Long)


# Sale
GET           /p/sale                                controllers.gen.SaleController.salePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/sale                            controllers.gen.SaleController.saleBackendPage()
GET           /report/sale                           controllers.gen.SaleController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/sale                              controllers.gen.SaleController.getNew()

PUT           /sale/:id                              controllers.gen.SaleController.update(id: Long)
POST          /sale                                  controllers.gen.SaleController.add()

GET           /sale/:id/products                     controllers.gen.SaleController.getSaleProducts(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /sale/:id/users                        controllers.gen.SaleController.getSaleUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /sale/:id                              controllers.gen.SaleController.delete(id: Long)


# SmsInfo
GET           /p/smsinfo                             controllers.gen.SmsInfoController.smsInfoPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/smsinfo                         controllers.gen.SmsInfoController.smsInfoBackendPage()
GET           /report/smsinfo                        controllers.gen.SmsInfoController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/smsinfo                           controllers.gen.SmsInfoController.getNew()

PUT           /smsinfo/:id                           controllers.gen.SmsInfoController.update(id: Long)
POST          /smsinfo                               controllers.gen.SmsInfoController.add()


# Staff
GET           /p/staff                               controllers.gen.StaffController.staffPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/staff                           controllers.gen.StaffController.staffBackendPage()
GET           /report/staff                          controllers.gen.StaffController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/staff                             controllers.gen.StaffController.getNew()

PUT           /staff/:id                             controllers.gen.StaffController.update(id: Long)
POST          /staff                                 controllers.gen.StaffController.add()

GET           /staff/:id/users                       controllers.gen.StaffController.getStaffUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /staff/:id/visits                      controllers.gen.StaffController.getStaffVisits(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /staff/:id                             controllers.gen.StaffController.delete(id: Long)


# TalkSkill
GET           /p/talkskill                           controllers.gen.TalkSkillController.talkSkillPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/talkskill                       controllers.gen.TalkSkillController.talkSkillBackendPage()
GET           /report/talkskill                      controllers.gen.TalkSkillController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/talkskill                         controllers.gen.TalkSkillController.getNew()

PUT           /talkskill/:id                         controllers.gen.TalkSkillController.update(id: Long)
POST          /talkskill                             controllers.gen.TalkSkillController.add()


# Ticket
GET           /p/ticket                              controllers.gen.TicketController.ticketPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/ticket                          controllers.gen.TicketController.ticketBackendPage()
GET           /report/ticket                         controllers.gen.TicketController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/ticket                            controllers.gen.TicketController.getNew()

PUT           /ticket/:id                            controllers.gen.TicketController.update(id: Long)
POST          /ticket                                controllers.gen.TicketController.add()


# User
GET           /p/user                                controllers.gen.UserController.userPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/user                            controllers.gen.UserController.userBackendPage()
GET           /report/user                           controllers.gen.UserController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/user                              controllers.gen.UserController.getNew()

PUT           /user/:id                              controllers.gen.UserController.update(id: Long)
POST          /user                                  controllers.gen.UserController.add()

GET           /user/:id/pops                         controllers.gen.UserController.getUserPops(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/reds                         controllers.gen.UserController.getUserReds(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/reminds                      controllers.gen.UserController.getUserReminds(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/sales                        controllers.gen.UserController.getUserSales(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/staffs                       controllers.gen.UserController.getUserStaffs(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /user/:id                              controllers.gen.UserController.delete(id: Long)


# Visit
GET           /p/visit                               controllers.gen.VisitController.visitPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/visit                           controllers.gen.VisitController.visitBackendPage()
GET           /report/visit                          controllers.gen.VisitController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/visit                             controllers.gen.VisitController.getNew()

PUT           /visit/:id                             controllers.gen.VisitController.update(id: Long)
POST          /visit                                 controllers.gen.VisitController.add()

GET           /visit/:id/staffs                      controllers.gen.VisitController.getVisitStaffs(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /visit/:id                             controllers.gen.VisitController.delete(id: Long)



# Backend management
GET           /admin                                 controllers.Application.backendPage()

# Base API
GET           /base/:modelName/all                   controllers.BaseController.getAll(modelName: String, status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /base/:modelName/:id                   controllers.BaseController.getOne(modelName: String, id: Long)
DELETE        /base/:modelName/:id                   controllers.BaseController.delete(modelName: String, id: Long)
# POST          /base/html/:modelName/:id            controllers.BaseController.doHtmlDeleteOne(modelName: String, id: Long)

# Login auth
GET           /login                                 controllers.Application.login()
#GET           /logout                                      controllers.Application.logout()

# Backend auth
GET           /admin/login                           controllers.Application.backendLogin()
GET           /admin/auth                            controllers.Application.backendAuthenticate()
GET           /admin/logout                          controllers.Application.backendLogout()

# check
GET           /check                                 controllers.Application.checkAlive()
GET           /check/cfg                             controllers.Application.cfgSelfCheck()

# session
GET           /session/clear                         controllers.Application.clearSession()

# Static resource
GET           /assets/*file                          controllers.Assets.at(path="/public", file)

# image & thumb
POST          /upload/image                          controllers.ImageController.uploadImage()
GET           /showImage/:name                       controllers.ImageController.showImage(name: String)
GET           /showBarcode/:name                     controllers.ImageController.showBarcode(name: String)
GET           /showimg/:folder/:name                 controllers.ImageController.showImg(folder :String, name: String)
GET           /genthumb                              controllers.ImageController.generateAllThumbNailImg(tagsize :Float ?=0)
GET           /barcode/gen                           controllers.ImageController.genBarcodeDo(sourceStr :String?="", width :Integer?=0, height :Integer?=0, format: String?="")

# Captcha on server
GET           /captcha                               controllers.Application.captcha(tag: String?="common")

# DB Backup
GET           /db/backup/:dbtype                     controllers.DbController.dbBackup(dbtype :String)
GET           /db/backup/send/:dbtype                controllers.DbController.dbBackupAndSendEmail(dbtype :String)

# Web socket
GET           /chat/connect                          controllers.Application.webSocket()
GET           /chat/msg/:msg                         controllers.Application.chat(msg: String)
GET           /chat/channels                         controllers.Application.getChannels()

#i18n
GET           /i18n                                  controllers.Application.changeLanguage(lang: String?="zh-CN")

# weixin
GET           /weixin/serververify                   controllers.WeiXinController.serverVerify(signature :String, timestamp :String, nonce :String, echostr :String)
POST          /weixin/serververify                   controllers.WeiXinController.serverNotification()
GET           /users/sync/info                       controllers.WeiXinController.syncUserInfo()
GET           /wx/menu/add                           controllers.WeiXinController.addMenu()
GET           /MP_verify_S8YeiakuEjLIIOKn.txt        controllers.Assets.at(path="/public", file="MP_verify_S8YeiakuEjLIIOKn.txt")
GET           /dowxuser                              controllers.WeiXinController.doWxUser(code :String ?="", resellerCode :String ?="", path :String ?="")

# sms captcha
GET           /p/phone/bind                          controllers.Application.phoneBindPage()
POST          /sms/captcha/get                       controllers.SmsInfoController.getVetfy()
POST          /sms/captcha/check                     controllers.SmsInfoController.verifyCode()
POST          /phone/bind                            controllers.SmsInfoController.phoneBind()